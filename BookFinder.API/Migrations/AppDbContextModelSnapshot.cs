// <auto-generated />
using BookFinder.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookFinder.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookFinder.API.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublishedDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Andy Hunt & Dave Thomas",
                            CoverImageUrl = "https://example.com/pragmatic.jpg",
                            Description = "A classic book for software developers.",
                            ISBN = "978-0135957059",
                            PublishedDate = "1999-10-30",
                            Title = "The Pragmatic Programmer"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Robert C. Martin",
                            CoverImageUrl = "https://example.com/clean-code.jpg",
                            Description = "A must-read for writing maintainable code.",
                            ISBN = "978-0132350884",
                            PublishedDate = "2008-08-01",
                            Title = "Clean Code"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Erich Gamma",
                            CoverImageUrl = "https://example.com/design-patterns.jpg",
                            Description = "A fundamental book on software design patterns.",
                            ISBN = "978-0201633610",
                            PublishedDate = "1994-11-10",
                            Title = "Design Patterns"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Martin Fowler",
                            CoverImageUrl = "https://example.com/refactoring.jpg",
                            Description = "Improving the design of existing code.",
                            ISBN = "978-0201485677",
                            PublishedDate = "1999-07-08",
                            Title = "Refactoring"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Steve McConnell",
                            CoverImageUrl = "https://example.com/code-complete.jpg",
                            Description = "A practical handbook for software construction.",
                            ISBN = "978-0735619678",
                            PublishedDate = "2004-06-09",
                            Title = "Code Complete"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Kyle Simpson",
                            CoverImageUrl = "https://example.com/ydkjs.jpg",
                            Description = "Deep dive into JavaScript.",
                            ISBN = "978-1491904244",
                            PublishedDate = "2015-03-20",
                            Title = "You Don't Know JS"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Thomas H. Cormen",
                            CoverImageUrl = "https://example.com/algorithms.jpg",
                            Description = "Comprehensive book on algorithms.",
                            ISBN = "978-0262033848",
                            PublishedDate = "2009-07-31",
                            Title = "Introduction to Algorithms"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Donald Knuth",
                            CoverImageUrl = "https://example.com/tacp.jpg",
                            Description = "Classic book on programming.",
                            ISBN = "978-0201896831",
                            PublishedDate = "1997-06-07",
                            Title = "The Art of Computer Programming"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Marijn Haverbeke",
                            CoverImageUrl = "https://example.com/eloquent-js.jpg",
                            Description = "Modern JavaScript guide.",
                            ISBN = "978-1593279509",
                            PublishedDate = "2018-12-04",
                            Title = "Eloquent JavaScript"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Frederick P. Brooks Jr.",
                            CoverImageUrl = "https://example.com/mythical-man-month.jpg",
                            Description = "Essays on software engineering.",
                            ISBN = "978-0201835953",
                            PublishedDate = "1995-08-02",
                            Title = "The Mythical Man-Month"
                        });
                });

            modelBuilder.Entity("BookFinder.API.Models.FavoriteBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("FavoriteBooks");
                });

            modelBuilder.Entity("BookFinder.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookFinder.API.Models.FavoriteBook", b =>
                {
                    b.HasOne("BookFinder.API.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });
#pragma warning restore 612, 618
        }
    }
}
